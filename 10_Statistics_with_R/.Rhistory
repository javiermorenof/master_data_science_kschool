installed.packages()
a = 7
ls
2+2ç
2*3
5*7
library(dslabs)
install.packages("dslabs")
install.packages("dslabs")
install.packages("ggplot2movies")
library(devtools)
library(rvest)
lobrary(janitor)
library(janitor)
install.packages("janitor")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dslabs)
library(devtools)
library(rvest)
library(janitor)
library(ggplot2movies)
#options(encoding = 'UTF-8')
? co2
View(co2)
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
View(co2_wide)
library(tidyverse)
co2_tidy <- co2 %>% pivot_longer(cols=1:12,
names_to="mes",
values_to="mes")
co2_tidy <- co2 %>% pivot_longer(cols="1":"12",
names_to="mes",
values_to="mes")
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
names_ptypes = list(
gender = factor(levels = c("f", "m")),
age = factor(
levels = c("014", "1524", "2534", "3544", "4554", "5564", "65"),
ordered = TRUE
)
),
values_to = "count"
)
co2_tidy <- co2 %>% pivot_longer(cols=1:12,
names_to="month",
values_to="co2")
co2_tidy <- co2 %>% pivot_longer(cols = 1,
names_to = "month",
values_to = "co2")
co2_tidy <- co2 %>% pivot_longer(-year,
names_to = "month",
values_to = "co2")
co2_tidy <- co2 %>% pivot_longer(-year,
names_to = "month",
values_to = "co2")
? co2
View(co2)
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) %>%
setNames(1:12) %>%
mutate(year = as.character(1959:1997))
View(co2_wide)
co2_tidy <- co2 %>% pivot_longer(-year,
names_to = "month",
values_to = "co2")
co2_tidy <- co2_wide %>% pivot_longer(-year,
names_to = "month",
values_to = "co2")
co2_tidy <- co2_wide %>% pivot_longer(-year,
names_to = "month",
values_to = "co2")
co2_tidy
co2_tidy <- co2_wide %>% pivot_longer(-year,
names_to = "month",
values_to = "co2",
names_ptypes = list(co2 = integer())
co2_tidy
co2_tidy <- co2_wide %>% pivot_longer(-year,
names_to = "month",
values_to = "co2",
names_ptypes = list(co2 = integer()))
co2_tidy
admissions
admissions
test <- admissions %>% group_by (major,men)
admissions
test <- admissions %>% group_by (major,gender)
)
admissions
test <- admissions %>% group_by (major,gender)
admissions
test <- admissions %>% group_by (major,gender)
test
admissions
test <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admissions
test <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
test
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admission_wide %>% mutate("percentage_admitted_men" = (amdmitted_men)/(amdmitted_men + applicants_men),
"percentage_admitted_women" = (amdmitted_women)/(amdmitted_women + applicants_women))
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (amdmitted_men)/(amdmitted_men + applicants_men),
"percentage_admitted_women" = (amdmitted_women)/(amdmitted_women + applicants_women))
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men),
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women))
admissions_percent
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men),
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women))
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men),
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women))
admission_percent
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men),
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women))
admission_selected <- admission_wide %>% select(major, percentage_admitted_men, percentage_admitted_women)
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men),
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women))
admission_selected <- admission_percent %>% select(major, percentage_admitted_men, percentage_admitted_women)
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men),
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women))
admission_selected <- admission_percent %>% select(major, percentage_admitted_men, percentage_admitted_women)
admission_selected
admissions
admissions_wide <- admissions %>% pivot_wider(major,
names_from=gender,
values_from=c(admitted,applicants))
admission_percent <- admissions_wide %>% mutate("percentage_admitted_men" = (admitted_men)/(admitted_men + applicants_men)*100,
"percentage_admitted_women" = (admitted_women)/(admitted_women + applicants_women)*100)
admission_selected <- admission_percent %>% select(major, percentage_admitted_men, percentage_admitted_women)
admission_selected
setwd("~/git_shared/master_data_science_kschool/10_Statistics_with_R")
getwd
getwd()
###ESTADISTICA DESCRIPTIVA EJEMPLO1#######
getwd()
datos<- read.table("datos_eje1.txt", header = TRUE) #CARGAMOS LOS DATOS
datos
datos<- read.table("datos_eje1.txt", header = TRUE) #CARGAMOS LOS DATOS
datos
datos<- read.table("datos_eje1.txt", header = TRUE) #CARGAMOS LOS DATOS
datos
#Calculamos las frecuencias absolutas usamos la funci?n table()
absolutas <- table(datos$Calificacion)
absolutas
#Calculamos las frecuencias relativas usamos la funci?n prop.table() "note que primero se deben calcular las frecuencias absolutas"
relativas <- prop.table(absolutas)
relativas
#DIAGRAMAS DE BARRAS PARA CALIFICACION barplot()
barplot(absolutas, col=rainbow(4),xlab="Calificaciones",ylab="Frecuencias absolutas")
str(datos)
#DIAGRAMA DE SECTORES PARA CALIFICACION
pie(absolutas, col =rainbow(4))
#HISTOGRAMA PARA LA VARIABLE EDAD
hist(datos$Edad,col = "lightblue",xlab = "Edades", ylab = "Frecuencia", main = "Histograma para Edad")
#GRAFICO BOXPLOT
boxplot(datos$Edad, range = 1.5)
#GRAFICO BOXPLOT
boxplot(datos$Edad)
#GRAFICO BOXPLOT
boxplot(datos$Edad, range = 1.5)
boxplot(datos$Edad, range = 0.5)        #cambio del alargamiento de los bigotes
#Medidas de posici?n
summary(datos$Puntuacion)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(datos$Edad)
#Coeficiente de variaci?n
#Hay una regla no escrita que dice que los datos que est´an entre 0 y 0.5 tienen un buen coeficiente de variación.
media<-mean(datos$Edad)
library(stats)
library(stats4)
#################################################
##############################################
#DADO
dadoBueno=sample(c('1','2','3','4','5','6'), 100, replace = TRUE);
table(dadoBueno);
dadoBueno
barplot(table(dadoBueno))
#################################################
##############################################
#DADO
dadoBueno=sample(c('1','2','3','4','5','6'), 1000, replace = TRUE);
table(dadoBueno);
dadoBueno
barplot(table(dadoBueno))
#################################################
##############################################
#DADO
dadoBueno=sample(c('1','2','3','4','5','6'), 100, replace = TRUE);
table(dadoBueno);
dadoBueno
barplot(table(dadoBueno))
dadoTrucoNum=sample(c(1:6), 1000, replace = TRUE,prob = c(2,3,1,9,8,14))
table(dadoTrucoNum);
dadoTrucoNum
barplot(table(dadoTrucoNum))
summary(table(dadoTrucoNum))
summary(dadoTrucoNum)
dbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
pbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome un valor inferior a 2
qbinom(0.9,size=10,prob=0.2) # que valor de una binomial(10,0.2) presenta una probabilidad acumulada de 0.9 ?
rbinom(2000,size=10,prob=0.2) # generar 2000 valores aleatorios de una distribucion binomial(10,0.2)
###########ESTIMADORES PUNTUALES Y POR INTERVALOS DE CONFIANZa
datos<-read.table("datos_eje4.txt", header = TRUE)
#####
library(MASS)
library("stats")
library(stats4)
####### Estimadores por intervalos (ci = cota inferior; cs = cota superior)
#para la media
#COmo aquí uso qnorm estoy suponiendo que sé la  varianza de la población.
ci<-mean(datos$x)-qnorm(0.975,0,1)*sd(datos$x)/sqrt(100) #cota inferior conf=95% var conocida
